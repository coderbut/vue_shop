{
    "sourceFile": "src/components/goods/Add.vue",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1638628778559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1638628914472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,9 @@\n         type=\"info\"\r\n         show-icon\r\n         :closable=\"false\"\r\n         center\r\n-      >\r\n-      </el-alert>\r\n+      ></el-alert>\r\n       <!-- 步骤条 -->\r\n       <!-- activeIndex - 0 将字符串转换为数字传 finish-status 中 -->\r\n       <el-steps\r\n         :space=\"200\"\r\n"
                },
                {
                    "date": 1638629979722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,23 +9,12 @@\n     </el-breadcrumb>\r\n     <!-- 卡片 -->\r\n     <el-card>\r\n       <!-- 提示区域 -->\r\n-      <el-alert\r\n-        title=\"添加商品信息\"\r\n-        type=\"info\"\r\n-        show-icon\r\n-        :closable=\"false\"\r\n-        center\r\n-      ></el-alert>\r\n+      <el-alert title=\"添加商品信息\" type=\"info\" show-icon :closable=\"false\" center></el-alert>\r\n       <!-- 步骤条 -->\r\n       <!-- activeIndex - 0 将字符串转换为数字传 finish-status 中 -->\r\n-      <el-steps\r\n-        :space=\"200\"\r\n-        :active=\"activeIndex - 0\"\r\n-        finish-status=\"success\"\r\n-        align-center\r\n-      >\r\n+      <el-steps :space=\"200\" :active=\"activeIndex - 0\" finish-status=\"success\" align-center>\r\n         <el-step title=\"基本信息\"></el-step>\r\n         <el-step title=\"商品参数\"></el-step>\r\n         <el-step title=\"商品属性\"></el-step>\r\n         <el-step title=\"商品图片\"></el-step>\r\n@@ -69,30 +58,17 @@\n             </el-form-item>\r\n           </el-tab-pane>\r\n           <el-tab-pane label=\"商品参数\" name=\"1\">\r\n             <!-- 渲染表单 item 项 -->\r\n-            <el-form-item\r\n-              :label=\"item.attr_name\"\r\n-              v-for=\"item in manyTableData\"\r\n-              :key=\"item.attr_id\"\r\n-            >\r\n+            <el-form-item :label=\"item.attr_name\" v-for=\"item in manyTableData\" :key=\"item.attr_id\">\r\n               <!-- 复选框 -->\r\n               <el-checkbox-group v-model=\"item.attr_vals\">\r\n-                <el-checkbox\r\n-                  v-for=\"(cb, i) in item.attr_vals\"\r\n-                  :label=\"cb\"\r\n-                  :key=\"i\"\r\n-                  border\r\n-                ></el-checkbox>\r\n+                <el-checkbox v-for=\"(cb, i) in item.attr_vals\" :label=\"cb\" :key=\"i\" border></el-checkbox>\r\n               </el-checkbox-group>\r\n             </el-form-item>\r\n           </el-tab-pane>\r\n           <el-tab-pane label=\"商品属性\" name=\"2\">\r\n-            <el-form-item\r\n-              v-for=\"item in onlyTableData\"\r\n-              :key=\"item.attr_id\"\r\n-              :label=\"item.attr_name\"\r\n-            >\r\n+            <el-form-item v-for=\"item in onlyTableData\" :key=\"item.attr_id\" :label=\"item.attr_name\">\r\n               <el-input v-model=\"item.attr_vals\"></el-input>\r\n             </el-form-item>\r\n           </el-tab-pane>\r\n           <el-tab-pane label=\"商品图片\" name=\"3\">\r\n@@ -110,11 +86,9 @@\n           </el-tab-pane>\r\n           <el-tab-pane label=\"商品内容\" name=\"4\">\r\n             <!-- 富文本编辑器 -->\r\n             <quill-editor v-model=\"addForm.goods_introduce\"></quill-editor>\r\n-            <el-button type=\"primary\" class=\"addBtn\" @click=\"addGoods\"\r\n-              >添加商品</el-button\r\n-            >\r\n+            <el-button type=\"primary\" class=\"addBtn\" @click=\"addGoods\">添加商品</el-button>\r\n           </el-tab-pane>\r\n         </el-tabs>\r\n       </el-form>\r\n     </el-card>\r\n@@ -126,16 +100,16 @@\n </template>\r\n \r\n <script>\r\n // 导入 lodash\r\n-import _ from \"lodash\";\r\n+import _ from 'lodash'\r\n \r\n export default {\r\n-  data() {\r\n+  data () {\r\n     return {\r\n-      activeIndex: \"0\",\r\n+      activeIndex: '0',\r\n       addForm: {\r\n-        goods_name: \"\",\r\n+        goods_name: '',\r\n         goods_price: 0,\r\n         goods_weight: 0,\r\n         goods_number: 0,\r\n         // 商品所属的分类数组\r\n@@ -146,197 +120,197 @@\n       addFormRules: {\r\n         goods_name: [\r\n           {\r\n             required: true,\r\n-            message: \"请输入商品名称\",\r\n-            trigger: \"blur\"\r\n+            message: '请输入商品名称',\r\n+            trigger: 'blur'\r\n           }\r\n         ],\r\n         goods_price: [\r\n           {\r\n             required: true,\r\n-            message: \"请输入商品价格\",\r\n-            trigger: \"blur\"\r\n+            message: '请输入商品价格',\r\n+            trigger: 'blur'\r\n           }\r\n         ],\r\n         goods_weight: [\r\n           {\r\n             required: true,\r\n-            message: \"请输入商品重量\",\r\n-            trigger: \"blur\"\r\n+            message: '请输入商品重量',\r\n+            trigger: 'blur'\r\n           }\r\n         ],\r\n         goods_number: [\r\n           {\r\n             required: true,\r\n-            message: \"请输入商品数量\",\r\n-            trigger: \"blur\"\r\n+            message: '请输入商品数量',\r\n+            trigger: 'blur'\r\n           }\r\n         ],\r\n         goods_cat: [\r\n           {\r\n             required: true,\r\n-            message: \"请选择商品分类\",\r\n-            trigger: \"blur\"\r\n+            message: '请选择商品分类',\r\n+            trigger: 'blur'\r\n           }\r\n         ]\r\n       },\r\n       cateList: [],\r\n       cateProps: {\r\n-        expandTrigger: \"hover\",\r\n-        label: \"cat_name\",\r\n-        value: \"cat_id\",\r\n-        children: \"children\"\r\n+        expandTrigger: 'hover',\r\n+        label: 'cat_name',\r\n+        value: 'cat_id',\r\n+        children: 'children'\r\n       },\r\n       // 动态参数列表\r\n       manyTableData: [],\r\n       // 静态属性列表\r\n       onlyTableData: [],\r\n       // upload 组件中的请求头对象\r\n       // 为上传组件添加请求头确保上传成功, 在 upload 组件中并未使用 mainjs 中已定义的 axios 拦截器\r\n       headersObj: {\r\n-        Authorization: window.sessionStorage.getItem(\"token\")\r\n+        Authorization: window.sessionStorage.getItem('token')\r\n       },\r\n       // 图片预览\r\n-      previewPath: \"\",\r\n+      previewPath: '',\r\n       PreviewVisible: false,\r\n       // 商品描述\r\n-      goods_introduce: \"\"\r\n-    };\r\n+      goods_introduce: ''\r\n+    }\r\n   },\r\n-  created() {\r\n-    this.getCateList();\r\n+  created () {\r\n+    this.getCateList()\r\n   },\r\n   methods: {\r\n     // 获取商品分类数据\r\n-    async getCateList() {\r\n-      const { data: res } = await this.$http.get(\"categories\");\r\n+    async getCateList () {\r\n+      const { data: res } = await this.$http.get('categories')\r\n       if (res.meta.status !== 200) {\r\n-        return this.$message.error(\"获取商品分类数据失败\");\r\n+        return this.$message.error('获取商品分类数据失败')\r\n       }\r\n-      this.cateList = res.data;\r\n+      this.cateList = res.data\r\n     },\r\n     // 级联选择器选中项变化触发\r\n-    handleChange() {\r\n+    handleChange () {\r\n       if (this.addForm.goods_cat.length !== 3) {\r\n-        this.addForm.goods_cat = [];\r\n+        this.addForm.goods_cat = []\r\n       }\r\n     },\r\n     // 管理 tabs 的切换, 返回 false 则阻止标签页切换\r\n-    beforeTabLeave(activeName, oldActiveName) {\r\n-      if (oldActiveName === \"0\" && this.addForm.goods_cat.length !== 3) {\r\n-        this.$message.error(\"请先选择商品分类！\");\r\n-        return false;\r\n+    beforeTabLeave (activeName, oldActiveName) {\r\n+      if (oldActiveName === '0' && this.addForm.goods_cat.length !== 3) {\r\n+        this.$message.error('请先选择商品分类！')\r\n+        return false\r\n       }\r\n     },\r\n-    async tabClicked() {\r\n+    async tabClicked () {\r\n       // 证明访问的是动态参数面板\r\n-      if (this.activeIndex === \"1\") {\r\n+      if (this.activeIndex === '1') {\r\n         const { data: res } = await this.$http.get(\r\n           `categories/${this.cateId}/attributes`,\r\n           {\r\n             params: {\r\n-              sel: \"many\"\r\n+              sel: 'many'\r\n             }\r\n           }\r\n-        );\r\n+        )\r\n         if (res.meta.status !== 200) {\r\n-          return this.$message.error(\"获取商品参数失败\");\r\n+          return this.$message.error('获取商品参数失败')\r\n         }\r\n         res.data.forEach(item => {\r\n           item.attr_vals =\r\n-            item.attr_vals.length === 0 ? [] : item.attr_vals.split(\" \");\r\n-        });\r\n-        this.manyTableData = res.data;\r\n+            item.attr_vals.length === 0 ? [] : item.attr_vals.split(' ')\r\n+        })\r\n+        this.manyTableData = res.data\r\n         // console.log(res.data);\r\n       }\r\n       // 访问静态属性面板\r\n-      if (this.activeIndex === \"2\") {\r\n+      if (this.activeIndex === '2') {\r\n         const { data: res } = await this.$http.get(\r\n           `categories/${this.cateId}/attributes`,\r\n           {\r\n             params: {\r\n-              sel: \"only\"\r\n+              sel: 'only'\r\n             }\r\n           }\r\n-        );\r\n+        )\r\n         if (res.meta.status !== 200) {\r\n-          return this.$message.error(\"获取商品属性失败\");\r\n+          return this.$message.error('获取商品属性失败')\r\n         }\r\n-        this.onlyTableData = res.data;\r\n+        this.onlyTableData = res.data\r\n       }\r\n     },\r\n     // 图片预览事件\r\n-    handlePreview(file) {\r\n-      this.previewPath = file.response.data.url;\r\n-      this.PreviewVisible = true;\r\n+    handlePreview (file) {\r\n+      this.previewPath = file.response.data.url\r\n+      this.PreviewVisible = true\r\n     },\r\n     // 监听图片上传成功\r\n-    handleSuccess(res) {\r\n+    handleSuccess (res) {\r\n       const picInfo = {\r\n         pic: res.data.tmp_path\r\n-      };\r\n-      this.addForm.pics.push(picInfo);\r\n-      console.log(this.addForm);\r\n+      }\r\n+      this.addForm.pics.push(picInfo)\r\n+      console.log(this.addForm)\r\n     },\r\n     // 处理移除图片操作\r\n-    handleRemove(file) {\r\n+    handleRemove (file) {\r\n       /**\r\n        * 获取将要删除的图片临时路径\r\n        * 从 pics 数组中, 查询到这个图片对应的索引值\r\n        * 使用 splice 方法, 将图片信息对象, 从 pics数组中移除\r\n        */\r\n-      const filePath = file.response.data.tmp_path;\r\n-      const index = this.addForm.pics.findIndex(x => x.pic === filePath);\r\n-      this.addForm.pics.splice(index, 1);\r\n-      console.log(this.addForm);\r\n+      const filePath = file.response.data.tmp_path\r\n+      const index = this.addForm.pics.findIndex(x => x.pic === filePath)\r\n+      this.addForm.pics.splice(index, 1)\r\n+      console.log(this.addForm)\r\n     },\r\n-    addGoods() {\r\n+    addGoods () {\r\n       this.$refs.addFormRef.validate(async valid => {\r\n-        if (!valid) return this.$message.error(\"请填写必要的表单项\");\r\n+        if (!valid) return this.$message.error('请填写必要的表单项')\r\n         // 级联选择器必须要绑定一个数组, 而上传参数的时候需要上传一个字符串, 所以在上传之前需要使用深拷贝复制一份与级联选择器互不干扰的对象进行操作\r\n-        const form = _.cloneDeep(this.addForm);\r\n+        const form = _.cloneDeep(this.addForm)\r\n         // 处理分类参数, 将数组转换成字符串\r\n-        form.goods_cat = form.goods_cat.join(\",\");\r\n+        form.goods_cat = form.goods_cat.join(',')\r\n         // 处理动态参数\r\n         this.manyTableData.forEach(item => {\r\n           const newInfo = {\r\n             attr_id: item.attr_id,\r\n-            attr_value: item.attr_vals.join(\" \")\r\n-          };\r\n-          this.addForm.attrs.push(newInfo);\r\n-        });\r\n+            attr_value: item.attr_vals.join(' ')\r\n+          }\r\n+          this.addForm.attrs.push(newInfo)\r\n+        })\r\n         // 处理静态属性\r\n         this.onlyTableData.forEach(item => {\r\n           const newInfo = {\r\n             attr_id: item.attr_id,\r\n             attr_value: item.attr_vals\r\n-          };\r\n-          this.addForm.attrs.push(newInfo);\r\n-        });\r\n+          }\r\n+          this.addForm.attrs.push(newInfo)\r\n+        })\r\n         // console.log(form.attrs);\r\n-        form.attrs = this.addForm.attrs;\r\n-        console.log(form);\r\n+        form.attrs = this.addForm.attrs\r\n+        console.log(form)\r\n         // 发起请求添加商品 商品的名称必须是唯一的\r\n-        const { data: res } = await this.$http.post(\"goods\", form);\r\n+        const { data: res } = await this.$http.post('goods', form)\r\n         if (res.meta.status !== 201) {\r\n-          console.log(res);\r\n-          return this.$message.error(res.meta.msg);\r\n+          console.log(res)\r\n+          return this.$message.error(res.meta.msg)\r\n         }\r\n-        this.$message.success(\"添加商品成功\");\r\n-        this.$router.push(\"/goods\");\r\n-      });\r\n+        this.$message.success('添加商品成功')\r\n+        this.$router.push('/goods')\r\n+      })\r\n     }\r\n   },\r\n   computed: {\r\n-    cateId() {\r\n+    cateId () {\r\n       if (this.addForm.goods_cat.length === 3) {\r\n-        return this.addForm.goods_cat[2];\r\n+        return this.addForm.goods_cat[2]\r\n       }\r\n-      return null;\r\n+      return null\r\n     }\r\n   }\r\n-};\r\n+}\r\n </script>\r\n \r\n <style lang=\"less\" scoped>\r\n .el-checkbox {\r\n"
                }
            ],
            "date": 1638628778559,
            "name": "Commit-0",
            "content": "<template>\r\n  <div>\r\n    <!-- 面包屑 -->\r\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n      <el-breadcrumb-item :to=\"{ path: '/home' }\">首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item>商品管理</el-breadcrumb-item>\r\n      <el-breadcrumb-item>商品列表</el-breadcrumb-item>\r\n      <el-breadcrumb-item>添加商品</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 卡片 -->\r\n    <el-card>\r\n      <!-- 提示区域 -->\r\n      <el-alert\r\n        title=\"添加商品信息\"\r\n        type=\"info\"\r\n        show-icon\r\n        :closable=\"false\"\r\n        center\r\n      >\r\n      </el-alert>\r\n      <!-- 步骤条 -->\r\n      <!-- activeIndex - 0 将字符串转换为数字传 finish-status 中 -->\r\n      <el-steps\r\n        :space=\"200\"\r\n        :active=\"activeIndex - 0\"\r\n        finish-status=\"success\"\r\n        align-center\r\n      >\r\n        <el-step title=\"基本信息\"></el-step>\r\n        <el-step title=\"商品参数\"></el-step>\r\n        <el-step title=\"商品属性\"></el-step>\r\n        <el-step title=\"商品图片\"></el-step>\r\n        <el-step title=\"商品内容\"></el-step>\r\n        <el-step title=\"完成\"></el-step>\r\n      </el-steps>\r\n      <!-- tabs -->\r\n      <el-form\r\n        :model=\"addForm\"\r\n        :rules=\"addFormRules\"\r\n        ref=\"addFormRef\"\r\n        label-width=\"100px\"\r\n        label-position=\"top\"\r\n      >\r\n        <el-tabs\r\n          :tab-position=\"'left'\"\r\n          v-model=\"activeIndex\"\r\n          :before-leave=\"beforeTabLeave\"\r\n          @tab-click=\"tabClicked\"\r\n        >\r\n          <el-tab-pane label=\"商品信息\" name=\"0\">\r\n            <el-form-item label=\"商品名称\" prop=\"goods_name\">\r\n              <el-input v-model=\"addForm.goods_name\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"商品价格\" prop=\"goods_price\">\r\n              <el-input v-model=\"addForm.goods_price\" type=\"number\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"商品重量\" prop=\"goods_weight\">\r\n              <el-input v-model=\"addForm.goods_weight\" type=\"number\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"商品数量\" prop=\"goods_number\">\r\n              <el-input v-model=\"addForm.goods_number\" type=\"number\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"商品分类\" prop=\"goods_cat\">\r\n              <el-cascader\r\n                v-model=\"addForm.goods_cat\"\r\n                :options=\"cateList\"\r\n                :props=\"cateProps\"\r\n                @change=\"handleChange\"\r\n              ></el-cascader>\r\n            </el-form-item>\r\n          </el-tab-pane>\r\n          <el-tab-pane label=\"商品参数\" name=\"1\">\r\n            <!-- 渲染表单 item 项 -->\r\n            <el-form-item\r\n              :label=\"item.attr_name\"\r\n              v-for=\"item in manyTableData\"\r\n              :key=\"item.attr_id\"\r\n            >\r\n              <!-- 复选框 -->\r\n              <el-checkbox-group v-model=\"item.attr_vals\">\r\n                <el-checkbox\r\n                  v-for=\"(cb, i) in item.attr_vals\"\r\n                  :label=\"cb\"\r\n                  :key=\"i\"\r\n                  border\r\n                ></el-checkbox>\r\n              </el-checkbox-group>\r\n            </el-form-item>\r\n          </el-tab-pane>\r\n          <el-tab-pane label=\"商品属性\" name=\"2\">\r\n            <el-form-item\r\n              v-for=\"item in onlyTableData\"\r\n              :key=\"item.attr_id\"\r\n              :label=\"item.attr_name\"\r\n            >\r\n              <el-input v-model=\"item.attr_vals\"></el-input>\r\n            </el-form-item>\r\n          </el-tab-pane>\r\n          <el-tab-pane label=\"商品图片\" name=\"3\">\r\n            <!-- action: 图片要上传到服务器的后台 API 地址 -->\r\n            <el-upload\r\n              action=\"http://127.0.0.1:8888/api/private/v1/upload\"\r\n              :on-preview=\"handlePreview\"\r\n              :on-remove=\"handleRemove\"\r\n              list-type=\"picture\"\r\n              :headers=\"headersObj\"\r\n              :on-success=\"handleSuccess\"\r\n            >\r\n              <el-button size=\"small\" type=\"primary\">点击上传</el-button>\r\n            </el-upload>\r\n          </el-tab-pane>\r\n          <el-tab-pane label=\"商品内容\" name=\"4\">\r\n            <!-- 富文本编辑器 -->\r\n            <quill-editor v-model=\"addForm.goods_introduce\"></quill-editor>\r\n            <el-button type=\"primary\" class=\"addBtn\" @click=\"addGoods\"\r\n              >添加商品</el-button\r\n            >\r\n          </el-tab-pane>\r\n        </el-tabs>\r\n      </el-form>\r\n    </el-card>\r\n    <!-- 图片预览 -->\r\n    <el-dialog title=\"图片预览\" :visible.sync=\"PreviewVisible\" width=\"50%\">\r\n      <img :src=\"previewPath\" class=\"previewImg\" />\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 导入 lodash\r\nimport _ from \"lodash\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      activeIndex: \"0\",\r\n      addForm: {\r\n        goods_name: \"\",\r\n        goods_price: 0,\r\n        goods_weight: 0,\r\n        goods_number: 0,\r\n        // 商品所属的分类数组\r\n        goods_cat: [],\r\n        pics: [],\r\n        attrs: []\r\n      },\r\n      addFormRules: {\r\n        goods_name: [\r\n          {\r\n            required: true,\r\n            message: \"请输入商品名称\",\r\n            trigger: \"blur\"\r\n          }\r\n        ],\r\n        goods_price: [\r\n          {\r\n            required: true,\r\n            message: \"请输入商品价格\",\r\n            trigger: \"blur\"\r\n          }\r\n        ],\r\n        goods_weight: [\r\n          {\r\n            required: true,\r\n            message: \"请输入商品重量\",\r\n            trigger: \"blur\"\r\n          }\r\n        ],\r\n        goods_number: [\r\n          {\r\n            required: true,\r\n            message: \"请输入商品数量\",\r\n            trigger: \"blur\"\r\n          }\r\n        ],\r\n        goods_cat: [\r\n          {\r\n            required: true,\r\n            message: \"请选择商品分类\",\r\n            trigger: \"blur\"\r\n          }\r\n        ]\r\n      },\r\n      cateList: [],\r\n      cateProps: {\r\n        expandTrigger: \"hover\",\r\n        label: \"cat_name\",\r\n        value: \"cat_id\",\r\n        children: \"children\"\r\n      },\r\n      // 动态参数列表\r\n      manyTableData: [],\r\n      // 静态属性列表\r\n      onlyTableData: [],\r\n      // upload 组件中的请求头对象\r\n      // 为上传组件添加请求头确保上传成功, 在 upload 组件中并未使用 mainjs 中已定义的 axios 拦截器\r\n      headersObj: {\r\n        Authorization: window.sessionStorage.getItem(\"token\")\r\n      },\r\n      // 图片预览\r\n      previewPath: \"\",\r\n      PreviewVisible: false,\r\n      // 商品描述\r\n      goods_introduce: \"\"\r\n    };\r\n  },\r\n  created() {\r\n    this.getCateList();\r\n  },\r\n  methods: {\r\n    // 获取商品分类数据\r\n    async getCateList() {\r\n      const { data: res } = await this.$http.get(\"categories\");\r\n      if (res.meta.status !== 200) {\r\n        return this.$message.error(\"获取商品分类数据失败\");\r\n      }\r\n      this.cateList = res.data;\r\n    },\r\n    // 级联选择器选中项变化触发\r\n    handleChange() {\r\n      if (this.addForm.goods_cat.length !== 3) {\r\n        this.addForm.goods_cat = [];\r\n      }\r\n    },\r\n    // 管理 tabs 的切换, 返回 false 则阻止标签页切换\r\n    beforeTabLeave(activeName, oldActiveName) {\r\n      if (oldActiveName === \"0\" && this.addForm.goods_cat.length !== 3) {\r\n        this.$message.error(\"请先选择商品分类！\");\r\n        return false;\r\n      }\r\n    },\r\n    async tabClicked() {\r\n      // 证明访问的是动态参数面板\r\n      if (this.activeIndex === \"1\") {\r\n        const { data: res } = await this.$http.get(\r\n          `categories/${this.cateId}/attributes`,\r\n          {\r\n            params: {\r\n              sel: \"many\"\r\n            }\r\n          }\r\n        );\r\n        if (res.meta.status !== 200) {\r\n          return this.$message.error(\"获取商品参数失败\");\r\n        }\r\n        res.data.forEach(item => {\r\n          item.attr_vals =\r\n            item.attr_vals.length === 0 ? [] : item.attr_vals.split(\" \");\r\n        });\r\n        this.manyTableData = res.data;\r\n        // console.log(res.data);\r\n      }\r\n      // 访问静态属性面板\r\n      if (this.activeIndex === \"2\") {\r\n        const { data: res } = await this.$http.get(\r\n          `categories/${this.cateId}/attributes`,\r\n          {\r\n            params: {\r\n              sel: \"only\"\r\n            }\r\n          }\r\n        );\r\n        if (res.meta.status !== 200) {\r\n          return this.$message.error(\"获取商品属性失败\");\r\n        }\r\n        this.onlyTableData = res.data;\r\n      }\r\n    },\r\n    // 图片预览事件\r\n    handlePreview(file) {\r\n      this.previewPath = file.response.data.url;\r\n      this.PreviewVisible = true;\r\n    },\r\n    // 监听图片上传成功\r\n    handleSuccess(res) {\r\n      const picInfo = {\r\n        pic: res.data.tmp_path\r\n      };\r\n      this.addForm.pics.push(picInfo);\r\n      console.log(this.addForm);\r\n    },\r\n    // 处理移除图片操作\r\n    handleRemove(file) {\r\n      /**\r\n       * 获取将要删除的图片临时路径\r\n       * 从 pics 数组中, 查询到这个图片对应的索引值\r\n       * 使用 splice 方法, 将图片信息对象, 从 pics数组中移除\r\n       */\r\n      const filePath = file.response.data.tmp_path;\r\n      const index = this.addForm.pics.findIndex(x => x.pic === filePath);\r\n      this.addForm.pics.splice(index, 1);\r\n      console.log(this.addForm);\r\n    },\r\n    addGoods() {\r\n      this.$refs.addFormRef.validate(async valid => {\r\n        if (!valid) return this.$message.error(\"请填写必要的表单项\");\r\n        // 级联选择器必须要绑定一个数组, 而上传参数的时候需要上传一个字符串, 所以在上传之前需要使用深拷贝复制一份与级联选择器互不干扰的对象进行操作\r\n        const form = _.cloneDeep(this.addForm);\r\n        // 处理分类参数, 将数组转换成字符串\r\n        form.goods_cat = form.goods_cat.join(\",\");\r\n        // 处理动态参数\r\n        this.manyTableData.forEach(item => {\r\n          const newInfo = {\r\n            attr_id: item.attr_id,\r\n            attr_value: item.attr_vals.join(\" \")\r\n          };\r\n          this.addForm.attrs.push(newInfo);\r\n        });\r\n        // 处理静态属性\r\n        this.onlyTableData.forEach(item => {\r\n          const newInfo = {\r\n            attr_id: item.attr_id,\r\n            attr_value: item.attr_vals\r\n          };\r\n          this.addForm.attrs.push(newInfo);\r\n        });\r\n        // console.log(form.attrs);\r\n        form.attrs = this.addForm.attrs;\r\n        console.log(form);\r\n        // 发起请求添加商品 商品的名称必须是唯一的\r\n        const { data: res } = await this.$http.post(\"goods\", form);\r\n        if (res.meta.status !== 201) {\r\n          console.log(res);\r\n          return this.$message.error(res.meta.msg);\r\n        }\r\n        this.$message.success(\"添加商品成功\");\r\n        this.$router.push(\"/goods\");\r\n      });\r\n    }\r\n  },\r\n  computed: {\r\n    cateId() {\r\n      if (this.addForm.goods_cat.length === 3) {\r\n        return this.addForm.goods_cat[2];\r\n      }\r\n      return null;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n.el-checkbox {\r\n  margin: 0 10px 0 0 !important;\r\n}\r\n.previewImg {\r\n  width: 100%;\r\n}\r\n</style>\r\n"
        }
    ]
}